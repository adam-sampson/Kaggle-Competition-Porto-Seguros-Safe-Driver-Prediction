rm(ps.test.dt)
rm(ps.train.dt)
?gc
gc()
gc()
memory.size()
source("Functions.R")
packages <- c("data.table")
loadPackages(packages)
source("Functions.R")
ps.train.dt <- fread("train.csv")
ps.test.dt <- fread("test.csv")
memory.size()
ps.train.dt <- fread("train.csv")
gc()
memory.size()
gc()
gc
gc()
gc(verbose = TRUE)
pos.ps.train.dt <- ps.train.dt[target == 1,]
neg.ps.train.dt <- ps.train.dt[target == 0,]
str(ps.train.dt)
unique.train <- lapply(ps.train.dt,unique)
unique.test <- lapply(ps.test.dt,unique)
gc(verbose = TRUE)
?match
unique.train
1 %in% unique.train
1 %in% unique.train$ps_calc_20_bin
0 %in% unique.train$ps_calc_20_bin
unique.train[,"ps_calc_20_bin"]
unique.train[,ps_calc_20_bin]
unique.train[,"ps_calc_20_bin"]
unique.train["ps_calc_20_bin"]
unique.train["ps_calc_20_bin",]
unique.train["ps_calc_20_bin"]
mytestlist <- list(NULL)
mytestlist["myFeature"] <- c(0,1)
test1 <- unique.test[[1]]
test1 <- unique.test[1]
test1 <- unique.test[2]
train1 <- unique.train[2]
train1 <- unique.train[3]
c(NULL, 1)
checkForValuesInBoth <- function(sourceList, checkList) {
for(feature in sourceList) {
tempCatch <- NULL
for(value in sourceList[feature]) {
if(!(value %in% checkList[feature])) {
tempCatch <- c(tempCatch,value)
} else {
warning(paste0("Match found for ", value, " in ", feature))
}
}
}
return(tempCatch)
}
checkForValuesInBoth(test1,train1)
checkForValuesInBoth <- function(sourceList, checkList) {
for(feature in sourceList) {
print(feature)
tempCatch <- NULL
for(value in sourceList[feature]) {
if(!(value %in% checkList[feature])) {
tempCatch <- c(tempCatch,value)
} else {
warning(paste0("Match found for ", value, " in ", feature))
}
}
}
return(tempCatch)
}
checkForValuesInBoth(test1,train1)
names(test1)
checkForValuesInBoth <- function(sourceList, checkList) {
for(feature in names(sourceList)) {
print(feature)
tempCatch <- NULL
for(value in sourceList[feature]) {
if(!(value %in% checkList[feature])) {
tempCatch <- c(tempCatch,value)
} else {
warning(paste0("Match found for ", value, " in ", feature))
}
}
}
return(tempCatch)
}
checkForValuesInBoth(test1,train1)
test1["ps_ind_01"]
train1["ps_ind_01"]
train1[["ps_ind_01"]]
str(train1[["ps_ind_01"]])
length(train1[["ps_ind_01"]])
checkForValuesInBoth <- function(sourceList, checkList) {
for(feature in names(sourceList)) {
print(feature)
tempCatch <- NULL
for(value in sourceList[[feature]]) {
if(!(value %in% checkList[[feature]])) {
tempCatch <- c(tempCatch,value)
} else {
warning(paste0("Match found for ", value, " in ", feature))
}
}
}
return(tempCatch)
}
checkForValuesInBoth <- function(sourceList, checkList) {
for(feature in names(sourceList)) {
print(paste("Feature:",feature))
tempCatch <- NULL
for(value in sourceList[[feature]]) {
print(paste("Value:",value))
if(!(value %in% checkList[[feature]])) {
tempCatch <- c(tempCatch,value)
} else {
warning(paste0("Match found for ", value, " in ", feature))
}
}
}
return(tempCatch)
}
checkForValuesInBoth(test1,train1)
train1 <- c(1,2,3)
checkForValuesInBoth(test1,train1)
train1 <- list(ps_ind_01 = c(1,2,3))
checkForValuesInBoth(test1,train1)
myTestList <- c(myTestList,list(ps_ind_01 = c(1,2,3)))
mytestlist <- c(mytestlist,list(ps_ind_01 = c(1,2,3)))
rm(mytestlist)
mytestlist <- c(mytestlist,list(ps_ind_01 = c(1,2,3)))
mytestlist <- list(ps_ind_01 = c(1,2,3))
exists(outputList)
?exists
exists(mytestlist)
exists(test1)
exists("test1")
exists("outList")
exists("outList", inherits = FALSE)
checkForValuesInBoth <- function(sourceList, checkList) {
for(feature in names(sourceList)) {
print(paste("Feature:",feature))
tempCatch <- NULL
for(value in sourceList[[feature]]) {
print(paste("Value:",value))
if(!(value %in% checkList[[feature]])) {
tempCatch <- c(tempCatch,value)
} else {
# Do nothing.
# warning(paste0("Match found for ", value, " in ", feature))
}
}
print(paste("TempCatch = ",tempCatch))
if( (is.null(tempCatch) == FALSE) & (exists("outList", inherits = FALSE)) ) {
outList <- c(outList,list(feature = tempCatch))
} else if (is.null(tempCatch) == FALSE) {
outList <- list(feature = tempCatch)
}
}
return(tempCatch)
}
checkForValuesInBoth(test1,train1)
checkForValuesInBoth <- function(sourceList, checkList) {
for(feature in names(sourceList)) {
print(paste("Feature:",feature))
tempCatch <- NULL
for(value in sourceList[[feature]]) {
print(paste("Value:",value))
if(!(value %in% checkList[[feature]])) {
tempCatch <- c(tempCatch,value)
} else {
# Do nothing.
# warning(paste0("Match found for ", value, " in ", feature))
}
}
print(paste("TempCatch = ",c(tempCatch)))
if( (is.null(tempCatch) == FALSE) & (exists("outList", inherits = FALSE)) ) {
outList <- c(outList,list(feature = tempCatch))
} else if (is.null(tempCatch) == FALSE) {
outList <- list(feature = tempCatch)
}
}
if(exists("outList", inherits = FALSE)){
return(outList)
}
return(NULL)
}
checkForValuesInBoth(test1,train1)
checkForValuesInBoth <- function(sourceList, checkList) {
for(feature in names(sourceList)) {
print(paste("Feature:",feature))
tempCatch <- NULL
for(value in sourceList[[feature]]) {
print(paste("Value:",value))
if(!(value %in% checkList[[feature]])) {
tempCatch <- c(tempCatch,value)
} else {
# Do nothing.
# warning(paste0("Match found for ", value, " in ", feature))
}
}
print(paste("TempCatch = ",c(tempCatch)))
if( (is.null(tempCatch) == FALSE) & (exists("outList", inherits = FALSE)) ) {
outList <- c(outList,list(eval(feature) = tempCatch))
} else if (is.null(tempCatch) == FALSE) {
outList <- list(eval(feature) = tempCatch)
}
}
if(exists("outList", inherits = FALSE)){
return(outList)
}
return(NULL)
}
checkForValuesInBoth <- function(sourceList, checkList) {
for(feature in names(sourceList)) {
print(paste("Feature:",feature))
tempCatch <- NULL
for(value in sourceList[[feature]]) {
print(paste("Value:",value))
if(!(value %in% checkList[[feature]])) {
tempCatch <- c(tempCatch,value)
} else {
# Do nothing.
# warning(paste0("Match found for ", value, " in ", feature))
}
}
print(paste("TempCatch = ",c(tempCatch)))
if( (is.null(tempCatch) == FALSE) & (exists("outList", inherits = FALSE)) ) {
outList <- c(outList,list(eval(feature) = tempCatch))
} else if (is.null(tempCatch) == FALSE) {
outList <- list(eval(feature) = tempCatch)
}
}
if(exists("outList", inherits = FALSE)){
return(outList)
}
return(NULL)
}
mytestlist[["myFeature"]] <= c(1,2,3)
mytestlist[["myFeature"]] <\- c(1,2,3)
mytestlist[["myFeature"]] <-- c(1,2,3)
randomlist[["myFeature"]] <- c(1,2,3)
randomlist <- list()
randomlist[["myFeature"]] <- c(1,2,3)
checkForValuesInBoth <- function(sourceList, checkList) {
outList <- list()
for(feature in names(sourceList)) {
print(paste("Feature:",feature))
tempCatch <- NULL
for(value in sourceList[[feature]]) {
print(paste("Value:",value))
if(!(value %in% checkList[[feature]])) {
tempCatch <- c(tempCatch,value)
} else {
# Do nothing.
# warning(paste0("Match found for ", value, " in ", feature))
}
}
print(paste("TempCatch = ",c(tempCatch)))
# if( (is.null(tempCatch) == FALSE) & (exists("outList", inherits = FALSE)) ) {
#   outList <- c(outList,list(eval(feature) = tempCatch))
# } else if (is.null(tempCatch) == FALSE) {
#   outList <- list(eval(feature) = tempCatch)
# }
outList[[feature]] <- tempCatch
}
# if(exists("outList", inherits = FALSE)){
#   return(outList)
# }
# return(NULL)
return(outList)
}
checkForValuesInBoth(test1,train1)
checkForValuesInBoth <- function(sourceList, checkList) {
outList <- list()
for(feature in names(sourceList)) {
# print(paste("Feature:",feature))
tempCatch <- NULL
for(value in sourceList[[feature]]) {
# print(paste("Value:",value))
if(!(value %in% checkList[[feature]])) {
tempCatch <- c(tempCatch,value)
} #else {
# Do nothing.
# warning(paste0("Match found for ", value, " in ", feature))
# }
}
# print(paste("TempCatch = ",c(tempCatch)))
# if( (is.null(tempCatch) == FALSE) & (exists("outList", inherits = FALSE)) ) {
#   outList <- c(outList,list(eval(feature) = tempCatch))
# } else if (is.null(tempCatch) == FALSE) {
#   outList <- list(eval(feature) = tempCatch)
# }
outList[[feature]] <- tempCatch
}
# if(exists("outList", inherits = FALSE)){
#   return(outList)
# }
# return(NULL)
return(outList)
}
valuesOnlyInTest <- checkForValuesInBoth(unique.test,unique.train)
valuesOnlyInTest
valuesOnlyInTest.bak <- valuesOnlyInTest
unique.test[2] %in% unique.train[3]
?contains
??contains
all(unique.test[2] %in% unique.train[3])
?all
all(unique.test[2],
unique.train[3])
all(unique.test[[2]] %in% unique.train[[3]])
unique.test[[2]] %in% unique.train[[3]]
unique.test[[22]] %in% unique.train[[23]]
unique.test %in% unique.train
unique.test[["ps_reg_03"]] %in% unique.train[["ps_reg_03"]]
tempvar <- unique.test[["ps_reg_03"]] %in% unique.train[["ps_reg_03"]]
unique.test[["ps_reg_03",tempvar]]
unique.test[["ps_reg_03",tempvar == TRUE]]
unique.test[["ps_reg_03"]]
unique.test[["ps_reg_03"]][tempvar]
unique.test[["ps_reg_03"]][!tempvar]
checkForValuesInBoth <- function(sourceList, checkList) {
outList <- list()
for(feature in names(sourceList)) {
# print(paste("Feature:",feature))
tempCatch <- NULL
logical.check <- sourceList[[feature]] %in% checkList[[feature]]
tempCatch <- sourceList[[feature]][!logical.check]
outList[[feature]] <- tempCatch
}
return(outList)
}
checkForValuesInBoth(test1,train1)
valuesOnlyInTest <- checkForValuesInBoth(unique.test,unique.train)
valuesOnlyInTest
tempvar <- unique.test[["ps_reg_02"]] %in% unique.train[["ps_reg_02"]]
unique.test[["ps_reg_02"]][!tempvar]
sum(tempvar) < length(tempvar)
tempvar <- unique.test[["ps_reg_03"]] %in% unique.train[["ps_reg_03"]]
sum(tempvar) < length(tempvar)
checkForValuesInBoth <- function(sourceList, checkList) {
outList <- list()
for(feature in names(sourceList)) {
# print(paste("Feature:",feature))
tempCatch <- NULL
logical.check <- sourceList[[feature]] %in% checkList[[feature]]
tempCatch <- sourceList[[feature]][!logical.check]
if(sum(tempCatch) < length(tempCatch)) {
outList[[feature]] <- tempCatch
}
}
return(outList)
}
checkForValuesInBoth <- function(sourceList, checkList) {
outList <- list()
for(feature in names(sourceList)) {
# print(paste("Feature:",feature))
tempCatch <- NULL
logical.check <- sourceList[[feature]] %in% checkList[[feature]]
tempCatch <- sourceList[[feature]][!logical.check]
if(sum(tempCatch) < length(tempCatch)) {
outList[[feature]] <- tempCatch
}
}
return(outList)
}
valuesOnlyInTest <- checkForValuesInBoth(unique.test,unique.train)
checkForValuesInBoth <- function(sourceList, checkList) {
outList <- list()
for(feature in names(sourceList)) {
# print(paste("Feature:",feature))
tempCatch <- NULL
logical.check <- sourceList[[feature]] %in% checkList[[feature]]
tempCatch <- sourceList[[feature]][!logical.check]
if(sum(as.numeric(tempCatch)) < length(tempCatch)) {
outList[[feature]] <- tempCatch
}
}
return(outList)
}
valuesOnlyInTest <- checkForValuesInBoth(unique.test,unique.train)
valuesOnlyInTest
checkForValuesInBoth <- function(sourceList, checkList) {
outList <- list()
for(feature in names(sourceList)) {
# print(paste("Feature:",feature))
tempCatch <- NULL
logical.check <- sourceList[[feature]] %in% checkList[[feature]]
tempCatch <- sourceList[[feature]][!logical.check]
# if(sum(as.numeric(tempCatch)) < length(tempCatch)) {
outList[[feature]] <- tempCatch
# }
}
return(outList)
}
valuesOnlyInTest
valuesOnlyInTest <- checkForValuesInBoth(unique.test,unique.train)
valuesOnlyInTest
source("LoadPackages.R")
packages <- c("data.table")
loadPackages(packages)
rm(packages)
source("Functions.R")
ps.train.dt <- fread("train.csv")
ps.test.dt <- fread("test.csv")
pos.ps.train.dt <- ps.train.dt[target == 1,]
neg.ps.train.dt <- ps.train.dt[target == 0,]
str(ps.train.dt)
summary(ps.train.dt)
unique.train <- lapply(ps.train.dt,unique)
unique.test <- lapply(ps.test.dt,unique)
valuesOnlyInTest <- checkForValuesInBoth(unique.test,unique.train)
print(valuesOnlyInTest)
rm(unique.train)
rm(unique.test)
rm(valuesOnlyInTest)
gc(verbose = TRUE)
unique.train <- lapply(ps.train.dt,unique)
unique.test <- lapply(ps.test.dt,unique)
valuesOnlyInTest <- checkForValuesInBoth(unique.test,unique.train)
valuesOnlyInTest$ps_calc_20_bin
valuesOnlyInTest$ps_calc_20_bin == integer(0)
valuesOnlyInTest$ps_calc_20_bin == 0
length(valuesOnlyInTest$ps_calc_20_bin)
length(valuesOnlyInTest$ps_calc_11)
checkForValuesInBoth <- function(sourceList, checkList) {
outList <- list()
for(feature in names(sourceList)) {
# print(paste("Feature:",feature))
tempCatch <- NULL
logical.check <- sourceList[[feature]] %in% checkList[[feature]]
tempCatch <- sourceList[[feature]][!logical.check]
if(length(tempCatch) != 0) {
outList[[feature]] <- tempCatch
}
}
return(outList)
}
valuesOnlyInTest <- checkForValuesInBoth(unique.test,unique.train)
print(valuesOnlyInTest)
packages <- c("data.table",
"dplyr",
"dummies")
loadPackages(packages)
loadPackages(packages)
rm(packages)
loadPackages <- function(packsToLoad) {
for(package in packsToLoad) {
if(require(package, character.only = TRUE) == FALSE) {
install.packages(package)
Sys.sleep(5)
require(package, character.only = TRUE)
} else {
require(package, character.only = TRUE)
}
}
}
?neuralnet
??neuralnet
packages <- c("data.table",
"dplyr",
"dummies",
"neuralnet")
loadPackages(packages)
rm(packages)
packages <- c("data.table",
"dplyr",
"dummies",
"neuralnet")
loadPackages(packages)
rm(packages)
?neuralnet
source("LoadPackages.R")
packages <- c("data.table",
"dplyr",
"dummies",
"neuralnet")
loadPackages(packages)
rm(packages)
source("Functions.R")
packages <- c("data.table",
"dplyr",
"dummies",
"neuralnet")
loadPackages(packages)
rm(packages)
source("Functions.R")
ps.train.dt <- fread("train.csv")
ps.train.dt <- fread("train.csv")
ps.test.dt <- fread("test.csv")
View(ps.test.dt)
View(ps.train.dt)
ps.train.dt %>% group_by(target) %>% summarize(mean = mean(ps_reg_03))
ps.train.dt %>% group_by(target) %>% summarize(mean = mean(ps_reg_03))
??FnPDList
memory.size()
Nrows <- 1000000
Data <- data.frame(Symbol=rep(LETTERS[1:26])) %>%
mutate(Symbol=as.character(Symbol)) %>%
bind_rows(replicate(Nrows-1,.,simplify=FALSE)) %>%
arrange(Symbol) %>%
group_by(Symbol) %>%
mutate(Idx=seq(1:Nrows)) %>%
mutate(Px=round(runif(Nrows)*20))
memory.size()
rm(Data)
gc(verbose = TRUE)
View(ps.train.dt)
mean(ps.train.dt$target)
